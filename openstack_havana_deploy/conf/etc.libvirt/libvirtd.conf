# master libvirt daemon configuration file
#
# for further information consult http://libvirt.org/format.html
#
# note: the tests/daemon-conf regression test script requires
# that each "parameter = value" line in this file have the parameter
# name just after a leading "#".

#################################################################
#
# network connectivity controls
#

# flag listening for secure tls connections on the public tcp/ip port.
# nb, must pass the --listen flag to the libvirtd process for this to
# have any effect.
#
# it is necessary to setup a ca and issue server certificates before
# using this capability.
#
# this is enabled by default, uncomment this to disable it
listen_tls = 0

# listen for unencrypted tcp connections on the public tcp/ip port.
# nb, must pass the --listen flag to the libvirtd process for this to
# have any effect.
#
# using the tcp socket requires sasl authentication by default. only
# sasl mechanisms which support data encryption are allowed. this is
# digest_md5 and gssapi (kerberos5)
#
# this is disabled by default, uncomment this to enable it.
listen_tcp = 1



# override the port for accepting secure tls connections
# this can be a port number, or service name
#
#tls_port = "16514"

# override the port for accepting insecure tcp connections
# this can be a port number, or service name
#
#tcp_port = "16509"


# override the default configuration which binds to all network
# interfaces. this can be a numeric ipv4/6 address, or hostname
#
#listen_addr = "192.168.0.1"


# flag toggling mdns advertizement of the libvirt service.
#
# alternatively can disable for all services on a host by
# stopping the avahi daemon
#
# this is disabled by default, uncomment this to enable it
#mdns_adv = 1

# override the default mdns advertizement name. this must be
# unique on the immediate broadcast network.
#
# the default is "virtualization host hostname", where hostname
# is subsituted for the short hostname of the machine (without domain)
#
#mdns_name = "virtualization host joe demo"


#################################################################
#
# unix socket access controls
#

# set the unix domain socket group ownership. this can be used to
# allow a 'trusted' set of users access to management capabilities
# without becoming root.
#
# this is restricted to 'root' by default.
unix_sock_group = "libvirtd"

# set the unix socket permissions for the r/o socket. this is used
# for monitoring vm status only
#
# default allows any user. if setting group ownership may want to
# restrict this to:
#unix_sock_ro_perms = "0777"

# set the unix socket permissions for the r/w socket. this is used
# for full management of vms
#
# default allows only root. if policykit is enabled on the socket,
# the default will change to allow everyone (eg, 0777)
#
# if not using policykit and setting group ownership for access
# control then you may want to relax this to:
unix_sock_rw_perms = "0770"

# set the name of the directory in which sockets will be found/created.
#unix_sock_dir = "/var/run/libvirt"

#################################################################
#
# authentication.
#
#  - none: do not perform auth checks. if you can connect to the
#          socket you are allowed. this is suitable if there are
#          restrictions on connecting to the socket (eg, unix
#          socket permissions), or if there is a lower layer in
#          the network providing auth (eg, tls/x509 certificates)
#
#  - sasl: use sasl infrastructure. the actual auth scheme is then
#          controlled from /etc/sasl2/libvirt.conf. for the tcp
#          socket only gssapi & digest-md5 mechanisms will be used.
#          for non-tcp or tls sockets,  any scheme is allowed.
#
#  - polkit: use policykit to authenticate. this is only suitable
#            for use on the unix sockets. the default policy will
#            require a user to supply their own password to gain
#            full read/write access (aka sudo like), while anyone
#            is allowed read/only access.
#
# set an authentication scheme for unix read-only sockets
# by default socket permissions allow anyone to connect
#
# to restrict monitoring of domains you may wish to enable
# an authentication mechanism here
auth_unix_ro = "none"

# set an authentication scheme for unix read-write sockets
# by default socket permissions only allow root. if policykit
# support was compiled into libvirt, the default will be to
# use 'polkit' auth.
#
# if the unix_sock_rw_perms are changed you may wish to enable
# an authentication mechanism here
auth_unix_rw = "none"

# change the authentication scheme for tcp sockets.
#
# if you don't enable sasl, then all tcp traffic is cleartext.
# don't do this outside of a dev/test scenario. for real world
# use, always enable sasl and use the gssapi or digest-md5
# mechanism in /etc/sasl2/libvirt.conf
#auth_tcp = "sasl"
auth_tcp = "none"

# change the authentication scheme for tls sockets.
#
# tls sockets already have encryption provided by the tls
# layer, and limited authentication is done by certificates
#
# it is possible to make use of any sasl authentication
# mechanism as well, by using 'sasl' for this option
#auth_tls = "none"



#################################################################
#
# tls x509 certificate configuration
#


# override the default server key file path
#
#key_file = "/etc/pki/libvirt/private/serverkey.pem"

# override the default server certificate file path
#
#cert_file = "/etc/pki/libvirt/servercert.pem"

# override the default ca certificate path
#
#ca_file = "/etc/pki/ca/cacert.pem"

# specify a certificate revocation list.
#
# defaults to not using a crl, uncomment to enable it
#crl_file = "/etc/pki/ca/crl.pem"



#################################################################
#
# authorization controls
#


# flag to disable verification of our own server certificates
#
# when libvirtd starts it performs some sanity checks against
# its own certificates.
#
# default is to always run sanity checks. uncommenting this
# will disable sanity checks which is not a good idea
#tls_no_sanity_certificate = 1

# flag to disable verification of client certificates
#
# client certificate verification is the primary authentication mechanism.
# any client which does not present a certificate signed by the ca
# will be rejected.
#
# default is to always verify. uncommenting this will disable
# verification - make sure an ip whitelist is set
#tls_no_verify_certificate = 1


# a whitelist of allowed x509  distinguished names
# this list may contain wildcards such as
#
#    "c=gb,st=london,l=london,o=red hat,cn=*"
#
# see the posix fnmatch function for the format of the wildcards.
#
# nb if this is an empty list, no client can connect, so comment out
# entirely rather than using empty list to disable these checks
#
# by default, no dn's are checked
#tls_allowed_dn_list = ["dn1", "dn2"]


# a whitelist of allowed sasl usernames. the format for usernames
# depends on the sasl authentication mechanism. kerberos usernames
# look like username@realm
#
# this list may contain wildcards such as
#
#    "*@example.com"
#
# see the posix fnmatch function for the format of the wildcards.
#
# nb if this is an empty list, no client can connect, so comment out
# entirely rather than using empty list to disable these checks
#
# by default, no username's are checked
#sasl_allowed_username_list = ["joe@example.com", "fred@example.com" ]



#################################################################
#
# processing controls
#

# the maximum number of concurrent client connections to allow
# over all sockets combined.
#max_clients = 20


# the minimum limit sets the number of workers to start up
# initially. if the number of active clients exceeds this,
# then more threads are spawned, up to max_workers limit.
# typically you'd want max_workers to equal maximum number
# of clients allowed
#min_workers = 5
#max_workers = 20


# the number of priority workers. if all workers from above
# pool will stuck, some calls marked as high priority
# (notably domaindestroy) can be executed in this pool.
#prio_workers = 5

# total global limit on concurrent rpc calls. should be
# at least as large as max_workers. beyond this, rpc requests
# will be read into memory and queued. this directly impact
# memory usage, currently each request requires 256 kb of
# memory. so by default up to 5 mb of memory is used
#
# xxx this isn't actually enforced yet, only the per-client
# limit is used so far
#max_requests = 20

# limit on concurrent requests from a single client
# connection. to avoid one client monopolizing the server
# this should be a small fraction of the global max_requests
# and max_workers parameter
#max_client_requests = 5

#################################################################
#
# logging controls
#

# logging level: 4 errors, 3 warnings, 2 information, 1 debug
# basically 1 will log everything possible
#log_level = 3

# logging filters:
# a filter allows to select a different logging level for a given category
# of logs
# the format for a filter is one of:
#    x:name
#    x:+name
#      where name is a string which is matched against source file name,
#      e.g., "remote", "qemu", or "util/json", the optional "+" prefix
#      tells libvirt to log stack trace for each message matching name,
#      and x is the minimal level where matching messages should be logged:
#    1: debug
#    2: info
#    3: warning
#    4: error
#
# multiple filter can be defined in a single @filters, they just need to be
# separated by spaces.
#
# e.g. to only get warning or errors from the remote layer and only errors
# from the event layer:
#log_filters="3:remote 4:event"

# logging outputs:
# an output is one of the places to save logging information
# the format for an output can be:
#    x:stderr
#      output goes to stderr
#    x:syslog:name
#      use syslog for the output and use the given name as the ident
#    x:file:file_path
#      output to a file, with the given filepath
# in all case the x prefix is the minimal level, acting as a filter
#    1: debug
#    2: info
#    3: warning
#    4: error
#
# multiple output can be defined, they just need to be separated by spaces.
# e.g. to log all warnings and errors to syslog under the libvirtd ident:
#log_outputs="3:syslog:libvirtd"
#

# log debug buffer size: default 64
# the daemon keeps an internal debug log buffer which will be dumped in case
# of crash or upon receiving a sigusr2 signal. this setting allows to override
# the default buffer size in kilobytes.
# if value is 0 or less the debug log buffer is deactivated
#log_buffer_size = 64


##################################################################
#
# auditing
#
# this setting allows usage of the auditing subsystem to be altered:
#
#   audit_level == 0  -> disable all auditing
#   audit_level == 1  -> enable auditing, only if enabled on host (default)
#   audit_level == 2  -> enable auditing, and exit if disabled on host
#
#audit_level = 2
#
# if set to 1, then audit messages will also be sent
# via libvirt logging infrastructure. defaults to 0
#
#audit_logging = 1

###################################################################
# uuid of the host:
# provide the uuid of the host here in case the command
# 'dmidecode -s system-uuid' does not provide a valid uuid. in case
# 'dmidecode' does not provide a valid uuid and none is provided here, a
# temporary uuid will be generated.
# keep the format of the example uuid below. uuid must not have all digits
# be the same.

# nb this default all-zeros uuid will not work. replace
# it with the output of the 'uuidgen' command and then
# uncomment this entry
#host_uuid = "00000000-0000-0000-0000-000000000000"

###################################################################
# keepalive protocol:
# this allows libvirtd to detect broken client connections or even
# dead client.  a keepalive message is sent to a client after
# keepalive_interval seconds of inactivity to check if the client is
# still responding; keepalive_count is a maximum number of keepalive
# messages that are allowed to be sent to the client without getting
# any response before the connection is considered broken.  in other
# words, the connection is automatically closed approximately after
# keepalive_interval * (keepalive_count + 1) seconds since the last
# message received from the client.  if keepalive_interval is set to
# -1, libvirtd will never send keepalive requests; however clients
# can still send them and the deamon will send responses.  when
# keepalive_count is set to 0, connections will be automatically
# closed after keepalive_interval seconds of inactivity without
# sending any keepalive messages.
#
#keepalive_interval = 5
#keepalive_count = 5
#
# if set to 1, libvirtd will refuse to talk to clients that do not
# support keepalive protocol.  defaults to 0.
#
#keepalive_required = 1
